#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE

. ${NUODB_HOME}/etc/nuodb_setup.sh

if [ -e ${NUODB_CFGDIR}/jvm-options -a "$NUODB_JAVA_OPTS" = "" ] ; then
    . ${NUODB_CFGDIR}/jvm-options
fi

: ${NUODB_SERVERID:=$(hostname)}
: ${NUODB_ALT_ADDRESS:=$(hostname --fqdn)}
: ${NUODB_ADMIN_PORT:="48005"}
: ${NUODB_ADMIN_SEMAPHORE:=/var/opt/nuodb/admin-semaphore}

#
# DS k8s platform requires the main container to wait for the other containers to "open the gate"
echo "Checking $NUODB_ADMIN_SEMAPHORE..."

# wait for the semaphore file to be created and readable
sleeptime=5
while [ ! -r $NUODB_ADMIN_SEMAPHORE ]; do
  if [ $sleeptime -gt 60 ]; then
    echo "Timed out waiting for init semaphore $NUODB_ADMIN_SEMAPHORE"
    exit 97
  fi

  sleep $sleeptime
  sleeptime=$(( sleeptime * 2 ))
done

# read from the semaphore - which will block if the semaphore is a FIFO
cat < $NUODB_ADIN_SEMAPHORE
echo "Semaphore $NUODB_ADMIN_SEMAPHORE open - proceeding to start AP"

# reset for next time
rm -rf $NUODB_ADMIN_SEMAPHORE

if [ "${NUODB_ALTERNATIVE_ENTRYPOINT}" != "" ] ; then
    if nuodocker --api-server "${NUODB_ALTERNATIVE_ENTRYPOINT}:8888" check servers ; then
        # Admin server exists at alternative entrypoint. Use it instead
        NUODB_DOMAIN_ENTRYPOINT="${NUODB_ALTERNATIVE_ENTRYPOINT}"
    fi
fi

# if endpoint is not specified, default to bootstrap server
if [ "${NUODB_DOMAIN_ENTRYPOINT}" = "" ] ; then
    NUODB_DOMAIN_ENTRYPOINT="${NUODB_BOOTSTRAP_SERVERID}"
fi

export NUODB_LOGDIR NUODB_CFGDIR NUODB_VARDIR NUODB_BINDIR NUODB_RUNDIR

# attempt to retain the previous crash directory (within the configured window to avoid filling the disk)
crashcount=$(find $NUODB_CRASHDIR/core* -maxdepth 0 ! -type d 2>/dev/null | wc -l)
if [ $crashcount -ge 1 ]; then
  retainedcrashcount=$(find $NUODB_LOGDIR/crash-* -maxdepth 0 -type d -cmin -$OVERWRITE_WINDOW 2>/dev/null | wc -l)
  if [ $retainedcrashcount -lt $OVERWRITE_COPIES ]; then
    crashbackupdir="$NUODB_LOGDIR/crash-$( date +%Y%m%dT%H%M%S )/"
    mkdir $crashbackupdir
    mv $NUODB_CRASHDIR/core* $crashbackupdir
  fi
fi

exec nuodocker start admin \
     --server-id "$NUODB_SERVERID" --alt-address "$NUODB_ALT_ADDRESS" --admin-port "$NUODB_ADMIN_PORT" \
     --domain-entrypoint "$NUODB_DOMAIN_ENTRYPOINT" --bootstrap-server-id "$NUODB_BOOTSTRAP_SERVERID" \
     --java-opts "$NUODB_JAVA_OPTS" --args "$*"