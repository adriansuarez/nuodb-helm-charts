#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE

. ${NUODB_HOME}/etc/nuodb_setup.sh

if [ -e ${NUODB_CFGDIR}/jvm-options -a "$NUODB_JAVA_OPTS" = "" ] ; then
    . ${NUODB_CFGDIR}/jvm-options
fi

: ${NUODB_SERVERID:=$(hostname)}
: ${NUODB_ALT_ADDRESS:=$(hostname --fqdn)}
: ${NUODB_ADMIN_PORT:="48005"}
: ${NUOADMIN_BOOTSTRAP_TIMEOUT:=60}

########
#  resolveVar()
#  resolve an indirect variable reference
#
function resolveVar() {
  local varName=$1

  local val=${!varName}
  local varRef=

  # if val starts with '$', then it is a variable reference to be resolved locally - ie here and now.
  if [[ "$val" =~ ^[$] ]]; then
    echo "$varName contains a variable reference: $val"
    varRef="${val#[$]}"    # strip off the first '$' prefix
    echo "$varName refers to $varRef"
    if [ "$varRef" = "HOSTIP" -o "$varRef" = "HOST_IP" ]; then
      val=$(grep "$HOSTNAME" /etc/hosts | grep -o "^[0-9.]*")    # resolve host IP from /etc/hosts
      [ $? -ne 0 ] && echo "Error resolving $varRef (named in $varName) from /etc/hosts file." && exit 1
    else
      val="${!varRef}"   # resolve the variable referred to in varRef
      [ $? -ne 0 ] && echo "Error resolving $varRef (named in $varName)." && exit 1
    fi

    echo "Resolved $varName -> $varRef -> $val"

    # store the result in the named variable
    printf -v "${varName}" '%s' "${val}"
    local retval=$?
    [ $retval -ne 0 ] && echo "Error setting $varName=$val" && return $retval
  fi

}
#########

# resolve var references (in the form $VAR_NAME) to local values.
resolveVar "NUODB_SERVERID"
resolveVar "NUODB_ADMIN_PORT"
resolveVar "NUODB_ALT_ADDRESS"
resolveVar "NUODB_DOMAIN_ENTRYPOINT"
resolveVar "NUODB_ALTERNATIVE_ENTRYPOINT"

if [ -n "${NUODB_ALTERNATIVE_ENTRYPOINT}" ] ; then
    # don't wait for the ALTERNATIVE_ENTRYPOINT to become ready if we are the DOMAIN_ENTRYPOINT server
    [ "$NUODB_SERVERID" != "$NUODB_DOMAIN_ENTRYPOINT" ] && altTimeout="--timeout ${NUOADMIN_BOOTSTRAP_TIMEOUT}"

    if nuodocker --api-server "${NUODB_ALTERNATIVE_ENTRYPOINT}:8888" check servers $altTimeout ; then
        # Admin server exists at alternative entrypoint. Use it instead
        NUODB_DOMAIN_ENTRYPOINT="${NUODB_ALTERNATIVE_ENTRYPOINT}"
    fi
fi

# if domain entrypoint is still empty, default to bootstrap server
: ${NUODB_DOMAIN_ENTRYPOINT:=$NUODB_BOOTSTRAP_SERVERID}

export NUODB_LOGDIR NUODB_CFGDIR NUODB_VARDIR NUODB_BINDIR NUODB_RUNDIR NUODB_DOMAIN_ENTRYPOINT

# attempt to retain the previous crash directory (within the configured window to avoid filling the disk)
crashcount=$(find $NUODB_CRASHDIR/core* -maxdepth 0 ! -type d 2>/dev/null | wc -l)
if [ $crashcount -ge 1 ]; then
  retainedcrashcount=$(find $NUODB_LOGDIR/crash-* -maxdepth 0 -type d -cmin -$OVERWRITE_WINDOW 2>/dev/null | wc -l)
  if [ $retainedcrashcount -lt $OVERWRITE_COPIES ]; then
    crashbackupdir="$NUODB_LOGDIR/crash-$( date +%Y%m%dT%H%M%S )/"
    mkdir $crashbackupdir
    mv $NUODB_CRASHDIR/core* $crashbackupdir
  fi
fi

exec nuodocker start admin \
     --server-id "$NUODB_SERVERID" --alt-address "$NUODB_ALT_ADDRESS" --admin-port "$NUODB_ADMIN_PORT" \
     --domain-entrypoint "$NUODB_DOMAIN_ENTRYPOINT" --bootstrap-server-id "$NUODB_BOOTSTRAP_SERVERID" \
     --java-opts "$NUODB_JAVA_OPTS" --args "$*"