{{- if eq (include "defaulttrue" .Values.database.primaryRelease) "true" }}
{{- if eq (include "defaulttrue" .Values.database.sm.hotCopy.enablePod) "true" }}
{{- if eq (include "defaulttrue" .Values.database.sm.hotCopy.enableBackups) "true" }}
{{- $globalScope := . -}}
{{- $backupGroups := list -}}
{{- range $i, $e := until (.Values.database.sm.hotCopy.replicas | int) -}}
  {{- $backupGroups = append $backupGroups (printf "%s-%d" (include "hotcopy.groupPrefix" $globalScope) $i) -}}
{{- end -}}
{{- if .Values.database.sm.hotCopy.backupGroups -}}
  {{- $backupGroups = (keys .Values.database.sm.hotCopy.backupGroups) | sortAlpha -}}
{{- end -}}
{{- if ne (len $backupGroups) (int .Values.database.sm.hotCopy.replicas) -}}
  {{- fail (printf "Unexpected number of backup groups configured expected=%d, actual=%d" .Values.database.sm.hotCopy.replicas (len $backupGroups)) }}
{{- end -}}
{{- range $i, $backupGroupName := $backupGroups -}}
  {{- with $globalScope }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: full-hotcopy-{{ .Values.database.name }}-{{ $backupGroupName }}
  labels:
    group: nuodb
    subgroup: backup
    database: {{ .Values.database.name }}
    backup-group: {{ $backupGroupName }}
spec:
  schedule: {{ include "hotcopy.schedule" (merge (dict "backupGroup" $backupGroupName "hotcopyType" "full") . ) }}
  startingDeadlineSeconds: {{ .Values.database.sm.hotCopy.deadline}}
  successfulJobsHistoryLimit: {{ .Values.database.sm.hotCopy.successHistory}}
  failedJobsHistoryLimit: {{ .Values.database.sm.hotCopy.failureHistory}}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: nuodb
            image: {{ template "nuodb.image" . }}
            imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
            args:
            - "nuobackup"
            - "--type"
            - "full"
            - "--db-name"
            - "{{ .Values.database.name }}"
            - "--group"
            - "{{ $backupGroupName }}"
            - "--timeout"
            - "{{ .Values.database.sm.hotCopy.timeout }}"      
            - "--backup-root"
            - "{{ .Values.database.sm.hotCopy.backupDir }}"
            - "--labels"
            - "{{ template "hotcopy.group.labels" (merge (dict "backupGroup" $backupGroupName "index" $i) .) }}"
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - { name: DB_NAME,             value: "{{ .Values.database.name }}"     }
            - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
            - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
            - { name: BACKUP_DIR,          value: "{{ .Values.database.sm.hotCopy.backupDir }}" }
            volumeMounts:
            - name: nuobackup
              mountPath: /usr/local/bin/nuobackup
              subPath: nuobackup
            {{- if .Values.admin.tlsCACert }}
            - name: tls-ca-cert
              mountPath: /etc/nuodb/keys/ca.cert
              subPath: {{ .Values.admin.tlsCACert.key }}
            {{- end }}
            {{- if .Values.admin.tlsClientPEM }}
            - name: tls-client-pem
              mountPath: /etc/nuodb/keys/nuocmd.pem
              subPath: {{ .Values.admin.tlsClientPEM.key }}
            {{- end }}
          volumes:
          - name: nuobackup
            configMap:
              name: {{ template "database.fullname" . }}-nuobackup
              defaultMode: 0777
          {{- if .Values.admin.tlsCACert }}
          - name: tls-ca-cert
            secret:
              secretName: {{ .Values.admin.tlsCACert.secret }}
              defaultMode: 0440
          {{- end }}
          {{- if .Values.admin.tlsClientPEM }}
          - name: tls-client-pem
            secret:
              secretName: {{ .Values.admin.tlsClientPEM.secret }}
              defaultMode: 0440
          {{- end }}
          restartPolicy: {{ .Values.database.sm.hotCopy.restartPolicy }}
{{- include "nuodb.imagePullSecrets" . | indent 10 }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: incremental-hotcopy-{{ .Values.database.name }}-{{ $backupGroupName }}
  labels:
    group: nuodb
    subgroup: backup
    database: {{ .Values.database.name }}
    backup-group: {{ $backupGroupName }}
spec:
  schedule: {{ include "hotcopy.schedule" (merge (dict "backupGroup" $backupGroupName "hotcopyType" "incremental") . ) }}
  startingDeadlineSeconds: {{ .Values.database.sm.hotCopy.deadline}}
  successfulJobsHistoryLimit: {{ .Values.database.sm.hotCopy.successHistory}}
  failedJobsHistoryLimit: {{ .Values.database.sm.hotCopy.failureHistory}}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: nuodb
            image: {{ template "nuodb.image" . }}
            imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
            args:
            - "nuobackup"
            - "--type"
            - "incremental"
            - "--db-name"
            - "{{ .Values.database.name }}"
            - "--group"
            - "{{ $backupGroupName }}"
            - "--timeout"
            - "{{ .Values.database.sm.hotCopy.timeout }}"      
            - "--backup-root"
            - "{{ .Values.database.sm.hotCopy.backupDir }}"
            - "--labels"
            - "{{ template "hotcopy.group.labels" (merge (dict "backupGroup" $backupGroupName "index" $i) .) }}"
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - { name: DB_NAME,             value: "{{ .Values.database.name }}"     }
            - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
            - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
            - { name: BACKUP_DIR,          value: "{{ .Values.database.sm.hotCopy.backupDir }}" }
            volumeMounts:
            - name: nuobackup
              mountPath: /usr/local/bin/nuobackup
              subPath: nuobackup
            {{- if .Values.admin.tlsCACert }}
            - name: tls-ca-cert
              mountPath: /etc/nuodb/keys/ca.cert
              subPath: {{ .Values.admin.tlsCACert.key }}
            {{- end }}
            {{- if .Values.admin.tlsClientPEM }}
            - name: tls-client-pem
              mountPath: /etc/nuodb/keys/nuocmd.pem
              subPath: {{ .Values.admin.tlsClientPEM.key }}
            {{- end }}
          volumes:
          - name: nuobackup
            configMap:
              name: {{ template "database.fullname" . }}-nuobackup
              defaultMode: 0777
          {{- if .Values.admin.tlsCACert }}
          - name: tls-ca-cert
            secret:
              secretName: {{ .Values.admin.tlsCACert.secret }}
              defaultMode: 0440
          {{- end }}
          {{- if .Values.admin.tlsClientPEM }}
          - name: tls-client-pem
            secret:
              secretName: {{ .Values.admin.tlsClientPEM.secret }}
              defaultMode: 0440
          {{- end }}
          restartPolicy: {{ .Values.database.sm.hotCopy.restartPolicy }}
{{- include "nuodb.imagePullSecrets" . | indent 10 }}

{{- if eq (include "defaultfalse" .Values.database.sm.hotCopy.journalBackup.enabled) "true" }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: journal-hotcopy-{{ .Values.database.name }}-{{ $backupGroupName }}
  labels:
    group: nuodb
    subgroup: backup
    database: {{ .Values.database.name }}
    backup-group: {{ $backupGroupName }} 
spec:
  schedule: {{ include "hotcopy.schedule" (merge (dict "backupGroup" $backupGroupName "hotcopyType" "journal") . ) }}
  startingDeadlineSeconds: {{ .Values.database.sm.hotCopy.journalBackup.deadline }}
  successfulJobsHistoryLimit: {{ .Values.database.sm.hotCopy.successHistory }}
  failedJobsHistoryLimit: {{ .Values.database.sm.hotCopy.failureHistory }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: nuodb
            image: {{ template "nuodb.image" . }}
            imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
            args:
            - "nuobackup"
            - "--type"
            - "journal"
            - "--db-name"
            - "{{ .Values.database.name }}"
            - "--group"
            - "{{ $backupGroupName }}"
            - "--timeout"
            - "{{ .Values.database.sm.hotCopy.journalBackup.timeout }}"      
            - "--backup-root"
            - "{{ .Values.database.sm.hotCopy.backupDir }}"
            - "--labels"
            - "{{ template "hotcopy.group.labels" (merge (dict "backupGroup" $backupGroupName "index" $i) .) }}"
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - { name: DB_NAME,             value: "{{ .Values.database.name }}"     }
            - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
            - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
            - { name: BACKUP_DIR,          value: "{{ .Values.database.sm.hotCopy.backupDir }}" }
            volumeMounts:
            - name: nuobackup
              mountPath: /usr/local/bin/nuobackup
              subPath: nuobackup
            {{- if .Values.admin.tlsCACert }}
            - name: tls-ca-cert
              mountPath: /etc/nuodb/keys/ca.cert
              subPath: {{ .Values.admin.tlsCACert.key }}
            {{- end }}
            {{- if .Values.admin.tlsClientPEM }}
            - name: tls-client-pem
              mountPath: /etc/nuodb/keys/nuocmd.pem
              subPath: {{ .Values.admin.tlsClientPEM.key }}
            {{- end }}
          volumes:
          - name: nuobackup
            configMap:
              name: {{ template "database.fullname" . }}-nuobackup
              defaultMode: 0777
          {{- if .Values.admin.tlsCACert }}
          - name: tls-ca-cert
            secret:
              secretName: {{ .Values.admin.tlsCACert.secret }}
              defaultMode: 0440
          {{- end }}
          {{- if .Values.admin.tlsClientPEM }}
          - name: tls-client-pem
            secret:
              secretName: {{ .Values.admin.tlsClientPEM.secret }}
              defaultMode: 0440
          {{- end }}
          restartPolicy: {{ .Values.database.sm.hotCopy.restartPolicy }}
{{- include "nuodb.imagePullSecrets" . | indent 10 }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
